class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
    
    def prepend(self,data):
      new_node = Node(data)
      new_node.next = self.head
      self.head = new_node
      
    def insert_after(self,pre_data,data):
      current=self.head
      while current:
        if current.data == pre_data:
          new_node=Node(data)
          new_node.next=current.next
          current.next = new_node
          return
        current=current.next
        
    def search(self,data):
      current=self.head
      while current:
        if current.data==data:
          return True
        current=current.next
      return False
      
    def delete_node(self,key):
      current=self.head
      while current and current.data==key:
        self.head = current.next
        return
      pre = None
      while current and current.data!=key:
        pre = current
        current=current.next
      if current is None:
        print("not found")
        return
      pre.next=current.next
      
    def reverse(self):
      current = self.head
      pre=None
      while current:
        next_Node = current.next
        current.next=pre
        pre=current
        current=next_Node
      self.head = pre
        
      
      
    def get(self,key):
      key-=1
      current=self.head
      c=0
      while current:
        if c==key:
          return current.data
        current =current.next
        c+=1
      print("invalid index")
      
    def display(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
            
    def insert_at(self,key,data):
      current=self.head
      c=0
      key-=1
      new_node=Node(data)
      if key==0:
        new_node.next=self.head
        self.head = new_node
        return
      while current and c<key-1:
        current=current.next
        c+=1
      if current is None:
        print("invalid index")
      new_node.next=current.next
      current.next=new_node

    def length(self):
      c=0
      current=self.head
      while current:
        c+=1
        current=current.next
      return c
      
    def last(self):
      if not self.head:
          return None
      current = self.head
      while current.next:
        current = current.next
      return current.data
      
my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)
my_list.prepend(5)
my_list.insert_at(5,40)
my_list.insert_after(20,25)
print(my_list.search(20))
my_list.delete_node(25)
print(my_list.length())
print(my_list.get(5))
print(my_list.last())
my_list.reverse()
my_list.display()
