class Node:
  def __init__(self,data):
    self.data=data
    self.pre=None
    self.next=None
    
class DoubleLinkedList:
  
  def __init__(self):
    self.head=None
    
    
  def appened(self,data):
    new_node=Node(data)
    if not self.head: 
      self.head = new_node
      return
    current = self.head
    while current.next:
      current=current.next
    current.next=new_node
    new_node.pre=current
  
  
  def display(self):
    current=self.head
    while current:
      print(current.data,end=" ")
      current=current.next
    print()
    
    
  def rdisplay(self):
    current=self.head
    if not current: return
    while current.next:
      current=current.next
    while current:
      print(current.data,end=" ")
      current=current.pre
    print()
  
  
  def delete(self,data):
    current=self.head
    while current:
      if current.data==data:
        if current.pre:
          current.pre.next=current.next
        else:
          self.head=current.next
        if current.next:
          current.next.pre=current.pre
      current=current.next
  def length(self):
    c=0;
    temp=self.head
    while temp:
      c+=1
      temp=temp.next
    return c
    
  def search(self,data):
    temp=self.head
    while temp:
      if temp.data==data:
        return True
      return False
  
  
  def reverse(self):
    temp=None
    current=self.head
    while current:
      temp=current.pre
      current.pre=current.next
      current.next=temp
      current=current.pre
    if temp:
      self.head=temp.pre
      
  def prepend(self, data):
    new_node = Node(data)
    if not self.head:
        self.head = new_node
        return
    new_node.next = self.head
    self.head.pre = new_node
    self.head = new_node
    

d=DoubleLinkedList()
d.appened(10)
d.appened(20)
d.appened(30)
d.appened(35)
d.delete(35)
print(d.length())
print(d.search(10))
d.display()
d.rdisplay()
d.reverse()
d.prepend(40)
d.display()
d.rdisplay()
