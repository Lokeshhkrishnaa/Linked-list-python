class Node:
  def __init__(self,data):
    self.data=data
    self.next=None

class CircularLinkList:
  def __init__(self):
    self.head=None
  
  
  def append(self,data):
    new_node=Node(data)
    if not self.head:
      self.head=new_node
      self.head.next=self.head
      return
    
    else:
      temp=self.head
      while temp.next!=self.head:
        temp=temp.next
      temp.next=new_node
      new_node.next=self.head
      
      
  def display(self):
    if not self.head:
      print("it is empty")
      return
    
    temp=self.head
    while True:
      print(temp.data,end=" ")
      temp=temp.next
      if temp==self.head:
        break
    print()
      
      
  def delete(self,data):
    if not self.head: return
    current=self.head
    pre=None
    
    while True:
      if current.data==data:
        if current==self.head and current.next==self.head:
          self.head=None
          return
        if current==self.head:
          tail=self.head
          while tail.next!=self.head:
            tail=tail.next
          self.head=self.head.next
          tail.next=self.head
          return
        pre.next=current.next
        return
      
      pre=current
      current=current.next
      if current==self.head:
        print("not present")
        break
      
      
  def search(self,data):
    if not self.head:
      print("it is empty")
      return
    
    current = self.head
    while True:
      if current.data==data:
        print(f"{data} found")
        return
      current=current.next
      if current==self.head:
        print("Not found")
        break
      
    
  def length(self):
    if not self.head:
      return 0
    c=1
    current=self.head.next
    while current!=self.head:
      c+=1
      current=current.next
    return c
    
    
  def to_list(self):
    l=[]
    if not self.head: return l
    
    temp=self.head
    while True:
      l.append(temp.data)
      temp=temp.next
      if temp==self.head:
        break
    return l
    
    
  def reverse(self):
    if not self.head or self.head.next==self.head:
      return
    pre=None
    current=self.head
    while True:
      next_node=current.next
      current.next=pre
      pre=current
      current=next_node
      if current==self.head: break
    self.head.next=pre
    self.head=pre
      
      
c=CircularLinkList()
c.append(10)
c.append(20)
c.append(30)
c.append(30)
c.delete(30)
c.search(20)
print(c.length())
c.display()
c.reverse()
print(c.to_list())
